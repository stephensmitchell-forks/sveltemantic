!function(){"use strict";const s=["client/chunk.84c92fce.js","client/index.9ce4141e.js","client/chunk.73ff140e.js","client/text.df1cc6ea.js","client/client.b124ca7a.js"].concat(["service-worker-index.html","favicon.png","global.css","logo.png","manifest.json","themes/basic/assets/fonts/icons.eot","themes/basic/assets/fonts/icons.svg","themes/basic/assets/fonts/icons.ttf","themes/basic/assets/fonts/icons.woff","themes/default/assets/fonts/brand-icons.eot","themes/default/assets/fonts/brand-icons.svg","themes/default/assets/fonts/brand-icons.ttf","themes/default/assets/fonts/brand-icons.woff","themes/default/assets/fonts/brand-icons.woff2","themes/default/assets/fonts/icons.eot","themes/default/assets/fonts/icons.svg","themes/default/assets/fonts/icons.ttf","themes/default/assets/fonts/icons.woff","themes/default/assets/fonts/icons.woff2","themes/default/assets/fonts/outline-icons.eot","themes/default/assets/fonts/outline-icons.svg","themes/default/assets/fonts/outline-icons.ttf","themes/default/assets/fonts/outline-icons.woff","themes/default/assets/fonts/outline-icons.woff2","themes/default/assets/images/flags.png","themes/github/assets/fonts/octicons-local.ttf","themes/github/assets/fonts/octicons.svg","themes/github/assets/fonts/octicons.ttf","themes/github/assets/fonts/octicons.woff","themes/material/assets/fonts/icons.eot","themes/material/assets/fonts/icons.svg","themes/material/assets/fonts/icons.ttf","themes/material/assets/fonts/icons.woff","themes/material/assets/fonts/icons.woff2"]),t=new Set(s);self.addEventListener("install",t=>{t.waitUntil(caches.open("cache1566441523373").then(t=>t.addAll(s)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",s=>{s.waitUntil(caches.keys().then(async s=>{for(const t of s)"cache1566441523373"!==t&&await caches.delete(t);self.clients.claim()}))}),self.addEventListener("fetch",s=>{if("GET"!==s.request.method||s.request.headers.has("range"))return;const e=new URL(s.request.url);e.protocol.startsWith("http")&&(e.hostname===self.location.hostname&&e.port!==self.location.port||(e.host===self.location.host&&t.has(e.pathname)?s.respondWith(caches.match(s.request)):"only-if-cached"!==s.request.cache&&s.respondWith(caches.open("offline1566441523373").then(async t=>{try{const e=await fetch(s.request);return t.put(s.request,e.clone()),e}catch(e){const n=await t.match(s.request);if(n)return n;throw e}}))))})}();
